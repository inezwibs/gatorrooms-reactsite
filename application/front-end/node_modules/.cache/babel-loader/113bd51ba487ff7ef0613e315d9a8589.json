{"ast":null,"code":"import _classCallCheck from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/homepage/component/drawer-items.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Divider, Checkbox, withStyles, List, ListItem, ListItemText, ListSubheader, Radio, RadioGroup, FormControlLabel } from '@material-ui/core';\nimport { getHouseTypes } from '../../../api/listings.actions';\nimport styles from '../styles/home-page';\nimport _ from 'lodash';\n\nvar DrawerItems =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(DrawerItems, _React$Component);\n\n  function DrawerItems(props) {\n    var _this;\n\n    _classCallCheck(this, DrawerItems);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DrawerItems).call(this, props));\n\n    _this.getHousingTypes = function () {\n      var types = _this.state.types;\n      getHouseTypes(function (data) {\n        types = types.concat(data.map(function (value) {\n          return _.capitalize(value.type);\n        }));\n\n        _this.setState({\n          types: types\n        });\n      });\n    };\n\n    _this.selectHousingType = function (type) {\n      return function (event) {\n        var onDrawerSelectionChange = _this.props.onDrawerSelectionChange;\n        var paramaters = _this.state.paramaters;\n\n        if (type === 'All') {\n          paramaters['types'] = [];\n\n          _this.setState({\n            paramaters: paramaters\n          }, function () {\n            onDrawerSelectionChange(paramaters);\n          });\n        } else {\n          if (event.target.checked) paramaters.types.push(type);else _.remove(paramaters.types, function (i) {\n            return i === type;\n          });\n\n          _this.setState({\n            paramaters: paramaters\n          }, function () {\n            onDrawerSelectionChange(paramaters);\n          });\n        }\n      };\n    };\n\n    _this.isChecked = function (text) {\n      return text === 'All' && _.isEmpty(_this.state.paramaters.types) || _this.state.paramaters.types.includes(text);\n    };\n\n    _this._handleBedsSelection = function (event) {\n      var paramaters = _this.state.paramaters;\n      var onDrawerSelectionChange = _this.props.onDrawerSelectionChange;\n      paramaters['beds'] = event.target.value;\n\n      _this.setState({\n        paramaters: paramaters\n      }, function () {\n        onDrawerSelectionChange(paramaters);\n      });\n    };\n\n    _this.state = {\n      types: ['All'],\n      // All by default, other types will come from DB.\n      paramaters: {\n        types: [],\n        // Empty means all\n        beds: '0'\n      }\n    };\n    _this.isChecked = _this.isChecked.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getHousingTypes = _this.getHousingTypes.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectHousingType = _this.selectHousingType.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(DrawerItems, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.getHousingTypes();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      var _this$state = this.state,\n          types = _this$state.types,\n          paramaters = _this$state.paramaters;\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(List, {\n        subheader: React.createElement(ListSubheader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, \" Housing Types\"),\n        className: classes.subList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, types.map(function (text, index) {\n        return React.createElement(ListItem, {\n          button: true,\n          key: \"item-\".concat(index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          checked: _this2.isChecked(text),\n          onChange: _this2.selectHousingType(text),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }), React.createElement(ListItemText, {\n          primary: text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }));\n      })), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(List, {\n        subheader: React.createElement(ListSubheader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, \"Beds\"),\n        className: classes.subList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(RadioGroup, {\n        \"aria-label\": \"Beds\",\n        value: paramaters.beds,\n        onChange: this._handleBedsSelection,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        value: \"0\",\n        control: React.createElement(Radio, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }),\n        label: \"0+\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }), React.createElement(FormControlLabel, {\n        value: \"1\",\n        control: React.createElement(Radio, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }),\n        label: \"1+\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), React.createElement(FormControlLabel, {\n        value: \"2\",\n        control: React.createElement(Radio, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }),\n        label: \"2+\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }))), React.createElement(Divider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return DrawerItems;\n}(React.Component);\n\nDrawerItems.propTypes = {\n  onDrawerSelectionChange: PropTypes.func.isRequired\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(DrawerItems);","map":{"version":3,"sources":["/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/homepage/component/drawer-items.js"],"names":["React","PropTypes","Divider","Checkbox","withStyles","List","ListItem","ListItemText","ListSubheader","Radio","RadioGroup","FormControlLabel","getHouseTypes","styles","_","DrawerItems","props","getHousingTypes","types","state","data","concat","map","value","capitalize","type","setState","selectHousingType","event","onDrawerSelectionChange","paramaters","target","checked","push","remove","i","isChecked","text","isEmpty","includes","_handleBedsSelection","beds","bind","classes","subList","index","Component","propTypes","func","isRequired","withTheme"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {    \n    Divider, Checkbox, withStyles,\n    List, ListItem, ListItemText, ListSubheader, \n    Radio, RadioGroup, FormControlLabel\n} from '@material-ui/core';\nimport { getHouseTypes } from '../../../api/listings.actions';\nimport styles from '../styles/home-page';\nimport _ from 'lodash';\n\nclass DrawerItems extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n            types: ['All'], // All by default, other types will come from DB.\n            paramaters: {\n                types: [], // Empty means all\n                beds: '0'\n            }\n          };\n          this.isChecked = this.isChecked.bind(this);\n          this.getHousingTypes = this.getHousingTypes.bind(this);\n          this.selectHousingType = this.selectHousingType.bind(this);\n    }\n\n    componentWillMount() {\n        this.getHousingTypes();\n    }\n\n    getHousingTypes = () => {\n        let { types } = this.state;\n        getHouseTypes((data) => {\n            types = types.concat(\n                data.map((value) => _.capitalize(value.type))\n            );\n            this.setState({ types: types })\n        })\n    }\n\n    selectHousingType = type => event => {\n        const { onDrawerSelectionChange } = this.props;\n        let { paramaters } = this.state;\n        if (type === 'All') {\n          paramaters['types'] = [];  \n          this.setState({ paramaters }, () => {\n            onDrawerSelectionChange(paramaters);\n          });\n        } else {\n          if (event.target.checked) paramaters.types.push(type);\n          else _.remove(paramaters.types, (i) => i === type);\n          this.setState({ paramaters }, () => {\n            onDrawerSelectionChange(paramaters);\n          });\n        }\n      };\n    \n      isChecked = (text) => {\n        return (text === 'All' && _.isEmpty(this.state.paramaters.types))\n          || this.state.paramaters.types.includes(text);\n      }\n\n      _handleBedsSelection = event => {\n        let { paramaters } = this.state;\n        const { onDrawerSelectionChange } = this.props;\n        paramaters['beds'] = event.target.value\n        this.setState({ paramaters }, () => {\n            onDrawerSelectionChange(paramaters);\n          });\n      };\n\n    render(){\n        const { classes } = this.props;\n        const { types, paramaters } = this.state;\n        return (\n            <React.Fragment>\n                <List subheader={<ListSubheader> Housing Types</ListSubheader>} className={classes.subList}>\n                    {types.map((text, index) => (\n                        <ListItem button key={`item-${index}`}>\n                            <Checkbox\n                                checked={this.isChecked(text)}\n                                onChange={this.selectHousingType(text)}\n                            />\n                            <ListItemText primary={text} />\n                        </ListItem>\n                    ))}\n                </List>\n                <Divider />\n                <List subheader={<ListSubheader>Beds</ListSubheader>} className={classes.subList}>\n                    <RadioGroup\n                        aria-label=\"Beds\"\n                        value={paramaters.beds}\n                        onChange={this._handleBedsSelection}\n                    >\n                        <FormControlLabel value=\"0\" control={<Radio />} label=\"0+\" />\n                        <FormControlLabel value=\"1\" control={<Radio />} label=\"1+\" />\n                        <FormControlLabel value=\"2\" control={<Radio />} label=\"2+\" />\n                    </RadioGroup>    \n                </List>\n                <Divider />\n            </React.Fragment>\n        )\n    }\n}\n\nDrawerItems.propTypes = {\n    onDrawerSelectionChange: PropTypes.func.isRequired\n}\n\nexport default withStyles(styles, { withTheme: true })(DrawerItems);"]},"metadata":{},"sourceType":"module"}