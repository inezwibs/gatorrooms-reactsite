{"ast":null,"code":"import _objectSpread from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/reguser/pages/admin-listings.js\";\nimport React, { Component } from 'react';\nimport { withStyles, Grid, Paper, Button, CardActions, Typography, Drawer, CssBaseline, Checkbox, List, ListItem, ListSubheader, ListItemText } from '@material-ui/core';\nimport ListingCard from '../../_global/component/listing-card';\nimport styles from '../styles/styles';\nimport _ from 'lodash';\nimport { getListings, approveListing } from '../../../api/listings.actions';\n\nvar FormRow = function FormRow(_ref) {\n  var listings = _ref.listings,\n      _ref$columnView = _ref.columnView,\n      columnView = _ref$columnView === void 0 ? true : _ref$columnView,\n      _ref$refresh = _ref.refresh,\n      refresh = _ref$refresh === void 0 ? function () {} : _ref$refresh;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, listings.map(function (value, index) {\n    return React.createElement(Grid, {\n      item: true,\n      lg: columnView ? 4 : 11,\n      md: 6,\n      sm: 12,\n      style: {\n        width: '100%'\n      },\n      key: \"grid-index-\".concat(index),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(ListingCard, {\n      listing: value,\n      displayBadge: true,\n      actions: React.createElement(CardActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"small\",\n        color: \"primary\",\n        onClick: function onClick() {\n          return approveListing(value.id, true, refresh);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"Approve\"), React.createElement(Button, {\n        size: \"small\",\n        color: \"secondary\",\n        onClick: function onClick() {\n          return approveListing(value.id, false, refresh);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, \"Reject\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }));\n  }));\n};\n\nvar AdminListings =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AdminListings, _Component);\n\n  function AdminListings(props) {\n    var _this;\n\n    _classCallCheck(this, AdminListings);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AdminListings).call(this, props));\n\n    _this._toggleSortMenu = function (event) {\n      var sortMenuVisible = _this.state.sortMenuVisible;\n      var state = {\n        sortMenuVisible: !sortMenuVisible\n      };\n\n      if (event) {\n        state['anchorEl'] = event.currentTarget;\n      }\n\n      _this.setState(state);\n    };\n\n    _this.getListings = function () {\n      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var params = new URLSearchParams();\n\n      if (query.types && !_.isEmpty(query.types)) {\n        var selectedTypes = query.types;\n        selectedTypes.forEach(function (value) {\n          return params.append(\"type\", value);\n        });\n      }\n\n      if (query.beds && query.beds !== '0') {\n        params.append(\"beds\", query.beds);\n      }\n\n      if (query.sortBy) {\n        params.append(\"sortBy\", query.sortBy);\n      }\n\n      if (query.text) {\n        params.append(\"text\", encodeURI(query.text));\n      }\n\n      if (query.approved) {\n        params.append(\"approved\", query.approved);\n      }\n\n      getListings(params, function (data) {\n        _this.setState({\n          listings: data || []\n        });\n      });\n    };\n\n    _this.displayListings = function (listings, columnView) {\n      var rows = [];\n\n      for (var i = 0; i < listings.length; i += 3) {\n        rows.push(React.createElement(Grid, {\n          container: true,\n          key: \"grid-container-\".concat(i + 1),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(FormRow, {\n          listings: listings.slice(i, i + 3),\n          props: _this.props,\n          columnView: columnView,\n          refresh: function refresh() {\n            return _this.getListings();\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 127\n          },\n          __self: this\n        })));\n      }\n\n      return rows;\n    };\n\n    _this.handleSortTxt = function (key) {\n      var _this$state = _this.state,\n          searchTxt = _this$state.searchTxt,\n          query = _this$state.query;\n\n      _this.setState({\n        sortBy: key\n      }, function () {\n        return _this.getListings(_objectSpread({}, query, {\n          text: searchTxt,\n          sortBy: key\n        }));\n      });\n    };\n\n    _this.isChecked = function (text) {\n      return text === 'All' && _this.state.approved === null || text === 'Approved' && _this.state.approved || text === 'Not Approved' && _this.state.approved === false;\n    };\n\n    _this.selectListings = function (text) {\n      return function (event) {\n        if (text === 'All') {\n          _this.setState({\n            approved: null\n          });\n        } else if (text === 'Approved') {\n          _this.setState({\n            approved: true\n          });\n        } else {\n          _this.setState({\n            approved: false\n          });\n        }\n      };\n    };\n\n    _this.state = {\n      listings: [],\n      sortMenuVisible: false,\n      anchorEl: null,\n      sortBy: null,\n      approved: null\n    };\n    _this.getListings = _this.getListings.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSortTxt = _this.handleSortTxt.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._toggleSortMenu = _this._toggleSortMenu.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AdminListings, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getListings();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (prevState.approved !== this.state.approved) {\n        if (this.state.approved !== null) {\n          this.getListings({\n            approved: \"\".concat(this.state.approved)\n          });\n        } else {\n          this.getListings();\n        }\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      var _this$state2 = this.state,\n          listings = _this$state2.listings,\n          columnView = _this$state2.columnView;\n      return React.createElement(Paper, {\n        className: classes.main,\n        elevation: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        style: {\n          width: '100%'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        lg: 2,\n        md: 3,\n        sm: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(CssBaseline, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(Drawer, {\n        className: classes.drawer,\n        variant: \"permanent\",\n        classes: {\n          paper: classes.drawerPaper\n        },\n        anchor: \"left\",\n        open: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, React.createElement(List, {\n        subheader: React.createElement(ListSubheader, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, \" Admin Types\"),\n        className: classes.subList,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, ['All', 'Approved', 'Not Approved'].map(function (text, index) {\n        return React.createElement(ListItem, {\n          button: true,\n          key: \"item-\".concat(index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, React.createElement(Checkbox, {\n          checked: _this2.isChecked(text),\n          onChange: _this2.selectListings(text),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }), React.createElement(ListItemText, {\n          primary: text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }));\n      })))), React.createElement(Grid, {\n        item: true,\n        lg: 10,\n        md: 9,\n        sm: 9,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        className: classes.title,\n        variant: 'h5',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, \"Admin\"), listings.length > 0 ? this.displayListings(listings, columnView) : React.createElement(\"div\", {\n        className: classes.profileListings,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        alignItems: 'center',\n        justify: 'center',\n        direction: 'column',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: 'display1',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, \"No Listings To Verify\"))))));\n    }\n  }]);\n\n  return AdminListings;\n}(Component);\n\nexport default withStyles(styles, {\n  withTheme: true\n})(AdminListings);","map":{"version":3,"sources":["/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/reguser/pages/admin-listings.js"],"names":["React","Component","withStyles","Grid","Paper","Button","CardActions","Typography","Drawer","CssBaseline","Checkbox","List","ListItem","ListSubheader","ListItemText","ListingCard","styles","_","getListings","approveListing","FormRow","listings","columnView","refresh","map","value","index","width","id","AdminListings","props","_toggleSortMenu","event","sortMenuVisible","state","currentTarget","setState","query","params","URLSearchParams","types","isEmpty","selectedTypes","forEach","append","beds","sortBy","text","encodeURI","approved","data","displayListings","rows","i","length","push","slice","handleSortTxt","key","searchTxt","isChecked","selectListings","anchorEl","bind","prevProps","prevState","classes","main","drawer","paper","drawerPaper","subList","title","profileListings","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n  withStyles, Grid, Paper, Button,\n  CardActions, Typography, Drawer,\n  CssBaseline, Checkbox,\n  List, ListItem, ListSubheader, ListItemText\n} from '@material-ui/core';\nimport ListingCard from '../../_global/component/listing-card';\nimport styles from '../styles/styles';\nimport _ from 'lodash';\nimport { getListings, approveListing } from '../../../api/listings.actions';\n\nconst FormRow = ({ listings, columnView = true, refresh = () => {} }) => {\n  return (\n    <React.Fragment>\n      {\n        listings.map((value, index) => (\n          <Grid\n            item\n            lg={columnView ? 4 : 11}\n            md={6}\n            sm={12}\n            style={{ width: '100%' }}\n            key={`grid-index-${index}`}\n          >\n            <ListingCard\n              listing={value}\n              displayBadge={true}\n              actions={(\n                <CardActions>\n                  <Button \n                    size=\"small\"\n                    color=\"primary\"\n                    onClick={() => approveListing(value.id, true, refresh)}\n                  >\n                    Approve\n                  </Button>\n                  <Button\n                    size=\"small\"\n                    color=\"secondary\"\n                    onClick={() => approveListing(value.id, false, refresh)}\n                  >\n                    Reject\n                  </Button>\n                </CardActions>\n              )}\n            />\n          </Grid>\n        ))\n      }\n    </React.Fragment>\n  );\n}\n\nclass AdminListings extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      listings: [],\n      sortMenuVisible: false,\n      anchorEl: null,\n      sortBy: null,\n      approved: null\n    };\n    this.getListings = this.getListings.bind(this);\n    this.handleSortTxt = this.handleSortTxt.bind(this);\n    this._toggleSortMenu = this._toggleSortMenu.bind(this);\n  }\n\n  _toggleSortMenu = (event) => {\n    const { sortMenuVisible } = this.state;\n    let state = { sortMenuVisible: !sortMenuVisible };\n    if(event){\n      state['anchorEl'] = event.currentTarget;\n    }\n    this.setState(state)\n  }\n\n  componentDidMount() {\n    this.getListings();\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if(prevState.approved !== this.state.approved){\n      if(this.state.approved !== null){\n        this.getListings({\n          approved: `${this.state.approved}`\n        })\n      }else{\n        this.getListings();\n      }\n    }\n  }\n\n  getListings = (query = {}) => {\n    let params = new URLSearchParams();\n    if (query.types && !_.isEmpty(query.types)) {\n      let selectedTypes = query.types;\n      selectedTypes.forEach((value) => params.append(\"type\", value));\n    }\n    if(query.beds && query.beds !== '0'){\n      params.append(\"beds\", query.beds);\n    }\n    if(query.sortBy){\n      params.append(\"sortBy\", query.sortBy);\n    }\n    if(query.text){\n      params.append(\"text\", encodeURI(query.text));\n    }\n    if(query.approved){\n      params.append(\"approved\", query.approved);\n    }\n    getListings(params, (data) => {\n      this.setState({ listings: data || [] })\n    })\n  }\n\n  displayListings = (listings, columnView) => {\n    let rows = [];\n    for (let i = 0; i < listings.length; i += 3) {\n      rows.push(\n        <Grid\n          container\n          key={`grid-container-${i + 1}`}\n        >\n          <FormRow\n            listings={listings.slice(i, i + 3)}\n            props={this.props}\n            columnView={columnView}\n            refresh={() => this.getListings()}\n          />\n        </Grid>\n      );\n    }\n    return rows;\n  }\n\n  handleSortTxt = key => {\n    const { searchTxt, query } = this.state;\n    this.setState({ sortBy: key }, () => this.getListings({\n      ...query,\n      text: searchTxt,\n      sortBy: key\n    }));\n  };\n\n  isChecked = (text) => {\n    return (text === 'All' && this.state.approved === null)\n      || (text === 'Approved' && this.state.approved)\n      || (text === 'Not Approved' && this.state.approved === false)\n  }\n\n  selectListings = text => event =>{\n    if(text === 'All'){\n      this.setState({ approved: null })\n    }else if(text === 'Approved'){\n      this.setState({ approved: true })\n    }else{\n      this.setState({ approved: false })\n    }\n  }\n\n  render() {\n    const classes = this.props.classes;\n    const { listings, columnView } = this.state;\n\n    return (\n      <Paper className={classes.main} elevation={1}>\n        <Grid container style={{ width: '100%' }} >\n        <Grid item lg={2} md={3} sm={3} >\n            <CssBaseline />\n            <Drawer\n                className={classes.drawer}\n                variant='permanent'\n                classes={{ paper: classes.drawerPaper }}\n                anchor=\"left\"\n                open\n              >\n                <List subheader={<ListSubheader> Admin Types</ListSubheader>} className={classes.subList}>\n                    {[ 'All', 'Approved', 'Not Approved' ].map((text, index) => (\n                        <ListItem button key={`item-${index}`}>\n                            <Checkbox\n                                checked={this.isChecked(text)}\n                                onChange={this.selectListings(text)}\n                            />\n                            <ListItemText primary={text} />\n                        </ListItem>\n                    ))}\n                </List>\n              </Drawer>\n          </Grid>\n          <Grid item lg={10} md={9} sm={9} >\n          <Typography className={classes.title} variant={'h5'} >Admin</Typography>\n          {listings.length > 0 ?\n              this.displayListings(listings, columnView) :\n              <div className={classes.profileListings} >\n                <Grid\n                  container\n                  alignItems={'center'}\n                  justify={'center'}\n                  direction={'column'}\n                >\n                  <Typography variant={'display1'} >\n                    No Listings To Verify\n                  </Typography>\n                </Grid>\n              </div>\n            }\n          </Grid>\n        </Grid>\n      </Paper>\n\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(AdminListings);"]},"metadata":{},"sourceType":"module"}