{"ast":null,"code":"import _classCallCheck from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/registration/registration.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, FormControlLabel, Button, Checkbox, Grid } from '@material-ui/core';\nimport Formsy from 'formsy-react';\nimport ValidateTextField from './field-with-validation';\nimport LoginRegisterError from \"./registration-error\";\nimport { Redirect } from 'react-router-dom';\nimport { userRegister } from '../../api/user.actions';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      marginLeft: theme.spacing.unit * 10,\n      marginRight: theme.spacing.unit * 10\n    },\n    form: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    field: {\n      marginTop: theme.spacing.unit,\n      width: theme.spacing.unit * 50\n    }\n  };\n};\n\nvar Register =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Register, _Component);\n\n  function Register(props) {\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Register).call(this, props));\n\n    _this.registerSubmit = function (regForm) {\n      regForm.isAdmin = _this.state.admin;\n      userRegister(regForm, function (_) {\n        _this.setState({\n          successfulRegistration: true\n        });\n      });\n    };\n\n    _this._handleCheck = function () {\n      var admin = _this.state.admin;\n\n      _this.setState({\n        admin: !admin\n      });\n    };\n\n    _this.disableSubmit = function () {\n      _this.setState({\n        canSubmit: false\n      });\n    };\n\n    _this.enableSubmit = function () {\n      _this.setState({\n        canSubmit: true\n      });\n    };\n\n    _this.state = {\n      canSubmit: false,\n      admin: false,\n      successfulRegistration: false\n    };\n    _this._handleCheck = _this._handleCheck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.registerSubmit = _this.registerSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          registerFailed = _this$props.registerFailed;\n      var _this$state = this.state,\n          canSubmit = _this$state.canSubmit,\n          admin = _this$state.admin,\n          successfulRegistration = _this$state.successfulRegistration;\n\n      if (successfulRegistration) {\n        return React.createElement(Redirect, {\n          to: '/login?registration=true',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        justify: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(Formsy, {\n        className: classes.form,\n        onValid: this.enableSubmit,\n        onInvalid: this.disableSubmit,\n        onValidSubmit: this.registerSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(ValidateTextField, {\n        name: \"firstName\",\n        autoComplete: \"firstName\",\n        validations: \"minLength:3\",\n        validationErrors: {\n          minLength: \"Too short\"\n        },\n        required: true,\n        className: classes.field,\n        label: \"First Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), React.createElement(ValidateTextField, {\n        name: \"lastName\",\n        autoComplete: \"lastName\",\n        validations: \"minLength:3\",\n        validationErrors: {\n          minLength: \"Too short\"\n        },\n        required: true,\n        className: classes.field,\n        label: \"Last Name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(ValidateTextField, {\n        name: \"email\",\n        autoComplete: \"email\",\n        validations: \"minLength:3\",\n        validationErrors: {\n          minLength: \"Too short\"\n        },\n        required: true,\n        className: classes.field,\n        label: \"Email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(ValidateTextField, {\n        type: \"password\",\n        name: \"password\",\n        autoComplete: \"new-password\",\n        validations: \"minLength:2\",\n        validationErrors: {\n          minLength: \"Too short\"\n        },\n        required: true,\n        className: classes.field,\n        label: \"Create a password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(ValidateTextField, {\n        type: \"password\",\n        name: \"repeatPassword\",\n        autoComplete: \"new-password\",\n        validations: \"equalsField:password\",\n        validationErrors: {\n          equalsField: \"passwords must match\"\n        },\n        required: true,\n        className: classes.field,\n        label: \"Enter password again\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(FormControlLabel, {\n        control: React.createElement(Checkbox, {\n          checked: admin,\n          onChange: this._handleCheck,\n          name: \"isAdmin\",\n          value: \"admin\",\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }),\n        name: \"isAdmin\",\n        label: \"Admin\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }), registerFailed && React.createElement(LoginRegisterError, {\n        message: registerFailed,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(Button, {\n        type: \"submit\",\n        variant: \"contained\",\n        color: \"primary\",\n        disabled: !canSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Register\"))));\n    }\n  }]);\n\n  return Register;\n}(Component);\n\nRegister.propTypes = {\n  onRegister: PropTypes.func,\n  registerFailed: PropTypes.string\n};\nexport default withStyles(styles)(Register);","map":{"version":3,"sources":["/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/registration/registration.js"],"names":["React","Component","PropTypes","withStyles","FormControlLabel","Button","Checkbox","Grid","Formsy","ValidateTextField","LoginRegisterError","Redirect","userRegister","styles","theme","root","marginLeft","spacing","unit","marginRight","form","display","flexDirection","field","marginTop","width","Register","props","registerSubmit","regForm","isAdmin","state","admin","_","setState","successfulRegistration","_handleCheck","disableSubmit","canSubmit","enableSubmit","bind","classes","registerFailed","minLength","equalsField","propTypes","onRegister","func","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  withStyles, FormControlLabel, Button,\n  Checkbox, Grid\n} from '@material-ui/core';\nimport Formsy from 'formsy-react';\nimport ValidateTextField from './field-with-validation';\nimport LoginRegisterError from \"./registration-error\";\nimport { Redirect } from 'react-router-dom';\nimport { userRegister } from '../../api/user.actions';\n\nconst styles = theme => ({\n  root: {\n    marginLeft: theme.spacing.unit * 10,\n    marginRight: theme.spacing.unit * 10,\n  },\n  form: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  field: {\n    marginTop: theme.spacing.unit,\n    width: theme.spacing.unit * 50\n  }\n});\n\n\nclass Register extends Component {\n  static propTypes = {\n    onRegister: PropTypes.func,\n    registerFailed: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      canSubmit: false,\n      admin: false,\n      successfulRegistration: false\n    }\n    this._handleCheck = this._handleCheck.bind(this);\n    this.registerSubmit = this.registerSubmit.bind(this);\n  }\n\n  registerSubmit = (regForm) => {\n    regForm.isAdmin = this.state.admin;\n    userRegister(regForm, (_) => {\n      this.setState({ successfulRegistration: true })\n    });\n  }\n\n  _handleCheck = () => {\n    const { admin } = this.state;\n    this.setState({ admin: !admin })\n  }\n\n  render() {\n\n    const { classes, registerFailed } = this.props;\n    const { canSubmit, admin, successfulRegistration } = this.state;\n\n    if(successfulRegistration){\n      return <Redirect to={'/login?registration=true'} />\n    }\n\n    return (\n      <div className={classes.root}>\n        <Grid\n          container\n          justify='center'\n        >\n          <Formsy className={classes.form}\n            onValid={this.enableSubmit} onInvalid={this.disableSubmit}\n            onValidSubmit={this.registerSubmit}>\n\n            <ValidateTextField\n              name=\"firstName\"\n              autoComplete=\"firstName\"\n              validations=\"minLength:3\"\n              validationErrors={{\n                minLength: \"Too short\"\n              }}\n              required\n              className={classes.field}\n              label=\"First Name\"\n            />\n\n            <ValidateTextField\n              name=\"lastName\"\n              autoComplete=\"lastName\"\n              validations=\"minLength:3\"\n              validationErrors={{\n                minLength: \"Too short\"\n              }}\n              required\n              className={classes.field}\n              label=\"Last Name\"\n            />\n\n            <ValidateTextField\n              name=\"email\"\n              autoComplete=\"email\"\n              validations=\"minLength:3\"\n              validationErrors={{\n                minLength: \"Too short\"\n              }}\n              required\n              className={classes.field}\n              label=\"Email\"\n            />\n\n            <ValidateTextField\n              type=\"password\"\n              name=\"password\"\n              autoComplete=\"new-password\"\n              validations=\"minLength:2\"\n              validationErrors={{\n                minLength: \"Too short\"\n              }}\n              required\n              className={classes.field}\n              label=\"Create a password\"\n            />\n\n            <ValidateTextField\n              type=\"password\"\n              name=\"repeatPassword\"\n              autoComplete=\"new-password\"\n              validations=\"equalsField:password\"\n              validationErrors={{\n                equalsField: \"passwords must match\"\n              }}\n              required\n              className={classes.field}\n              label=\"Enter password again\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={admin}\n                  onChange={this._handleCheck}\n                  name=\"isAdmin\"\n                  value=\"admin\"\n                  color=\"primary\"\n                />\n              }\n              name=\"isAdmin\"\n              label=\"Admin\"\n            />\n            {\n              registerFailed && <LoginRegisterError message={registerFailed} />\n            }\n\n            <Button type=\"submit\"\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={!canSubmit}\n            >\n              Register\n            </Button>\n\n          </Formsy>\n        </Grid>\n      </div>\n    );\n  }\n\n  disableSubmit = () => {\n    this.setState({ canSubmit: false })\n  };\n\n  enableSubmit = () => {\n    this.setState({ canSubmit: true })\n  };\n\n}\n\nexport default withStyles(styles)(Register);"]},"metadata":{},"sourceType":"module"}