{"ast":null,"code":"import _classCallCheck from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/googlemaps/maps.js\";\nimport React, { Component } from 'react'; //adding google maps\n\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { getGeocodingInfo } from '../../api/google.geocoding';\nexport var API_KEY = 'AIzaSyCiI9shqkKiKx8rs57v02JoWtKfP2aSyHk';\nvar MAP_SIZE = {\n  width: '400px',\n  height: '400px',\n  padding: '20px'\n};\n\nvar Maps =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Maps, _Component);\n\n  function Maps(_props) {\n    var _this;\n\n    _classCallCheck(this, Maps);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Maps).call(this, _props));\n\n    _this.onMarkerClick = function (props, marker, e) {\n      _this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n      });\n    };\n\n    _this.onClose = function (props) {\n      if (_this.state.showingInfoWindow) {\n        _this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    _this.onMapClick = function (props) {\n      if (_this.state.showingInfoWindow) {\n        _this.setState({\n          showingInfoWindow: false,\n          activeMarker: null\n        });\n      }\n    };\n\n    _this.state = {\n      showingInfoWindow: false,\n      //Hides or the shows the infoWindow\n      activeMarker: {},\n      //Shows the active marker upon click\n      selectedPlace: {},\n      //Shows the infoWindow to the selected place upon a marker\n      location: {\n        lat: 0,\n        lng: 0\n      },\n      loaded: false //binding to event handler functions\n\n    };\n    _this.onMarkerClick = _this.onMarkerClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onMapClick = _this.onMapClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Maps, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var address = this.props.address;\n      getGeocodingInfo(API_KEY, address, function (res) {\n        _this2.setState({\n          location: res.data.results.length > 0 ? res.data.results[0].geometry.location : {\n            lat: 0,\n            lng: 0\n          },\n          loaded: true\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    //for maps\n    value: function render() {\n      var _this$state = this.state,\n          location = _this$state.location,\n          loaded = _this$state.loaded;\n      var address = this.props.address;\n\n      if (loaded) {\n        return React.createElement(\"div\", {\n          style: MAP_SIZE,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, React.createElement(Map, {\n          google: this.props.google,\n          onClick: this.onMapClick,\n          zoom: 14,\n          style: MAP_SIZE,\n          initialCenter: {\n            lat: location.lat,\n            lng: location.lng\n          },\n          loaded: loaded,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(Marker, {\n          onClick: this.onMarkerClick,\n          mapCenter: {\n            lat: location.lat,\n            lng: location.lng\n          },\n          name: address,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }), React.createElement(InfoWindow, {\n          marker: this.state.activeMarker,\n          visible: this.state.showingInfoWindow,\n          onClose: this.onClose,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, this.state.selectedPlace.name)))));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        });\n      }\n    }\n  }]);\n\n  return Maps;\n}(Component);\n\nexport default GoogleApiWrapper({\n  apiKey: API_KEY\n})(Maps);","map":{"version":3,"sources":["/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/googlemaps/maps.js"],"names":["React","Component","Map","InfoWindow","Marker","GoogleApiWrapper","getGeocodingInfo","API_KEY","MAP_SIZE","width","height","padding","Maps","props","onMarkerClick","marker","e","setState","selectedPlace","activeMarker","showingInfoWindow","onClose","state","onMapClick","location","lat","lng","loaded","bind","address","res","data","results","length","geometry","google","name","apiKey"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,MAA1B,EAAkCC,gBAAlC,QAA0D,mBAA1D;AACA,SAASC,gBAAT,QAAiC,4BAAjC;AAEA,OAAO,IAAMC,OAAO,GAAG,yCAAhB;AAEP,IAAMC,QAAQ,GAAG;AACfC,EAAAA,KAAK,EAAE,OADQ;AAEfC,EAAAA,MAAM,EAAE,OAFO;AAGfC,EAAAA,OAAO,EAAE;AAHM,CAAjB;;IAMMC,I;;;;;AAEJ,gBAAYC,MAAZ,EAAmB;AAAA;;AAAA;;AACjB,8EAAMA,MAAN;;AADiB,UA4BnBC,aA5BmB,GA4BH,UAACD,KAAD,EAAQE,MAAR,EAAgBC,CAAhB,EAAsB;AACpC,YAAKC,QAAL,CAAc;AACZC,QAAAA,aAAa,EAAEL,KADH;AAEZM,QAAAA,YAAY,EAAEJ,MAFF;AAGZK,QAAAA,iBAAiB,EAAE;AAHP,OAAd;AAKD,KAlCkB;;AAAA,UAoCnBC,OApCmB,GAoCT,UAAAR,KAAK,EAAI;AACjB,UAAI,MAAKS,KAAL,CAAWF,iBAAf,EAAkC;AAChC,cAAKH,QAAL,CAAc;AACZG,UAAAA,iBAAiB,EAAE,KADP;AAEZD,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID;AACF,KA3CkB;;AAAA,UA6CnBI,UA7CmB,GA6CN,UAACV,KAAD,EAAW;AACtB,UAAI,MAAKS,KAAL,CAAWF,iBAAf,EAAkC;AAChC,cAAKH,QAAL,CAAc;AACZG,UAAAA,iBAAiB,EAAE,KADP;AAEZD,UAAAA,YAAY,EAAE;AAFF,SAAd;AAID;AACF,KApDkB;;AAEjB,UAAKG,KAAL,GAAa;AACXF,MAAAA,iBAAiB,EAAE,KADR;AACgB;AAC3BD,MAAAA,YAAY,EAAE,EAFH;AAEgB;AAC3BD,MAAAA,aAAa,EAAE,EAHJ;AAGiB;AAC5BM,MAAAA,QAAQ,EAAE;AACRC,QAAAA,GAAG,EAAE,CADG;AAERC,QAAAA,GAAG,EAAE;AAFG,OAJC;AAQXC,MAAAA,MAAM,EAAE,KARG,CAUb;;AAVa,KAAb;AAWA,UAAKb,aAAL,GAAqB,MAAKA,aAAL,CAAmBc,IAAnB,uDAArB;AACA,UAAKL,UAAL,GAAkB,MAAKA,UAAL,CAAgBK,IAAhB,uDAAlB;AAdiB;AAgBlB;;;;yCAEmB;AAAA;;AAAA,UACVC,OADU,GACE,KAAKhB,KADP,CACVgB,OADU;AAElBvB,MAAAA,gBAAgB,CAACC,OAAD,EAAUsB,OAAV,EAAmB,UAACC,GAAD,EAAS;AAC1C,QAAA,MAAI,CAACb,QAAL,CAAc;AAAEO,UAAAA,QAAQ,EAAEM,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiBC,MAAjB,GAA0B,CAA1B,GAA8BH,GAAG,CAACC,IAAJ,CAASC,OAAT,CAAiB,CAAjB,EAAoBE,QAApB,CAA6BV,QAA3D,GAAsE;AAC9FC,YAAAA,GAAG,EAAE,CADyF;AAE9FC,YAAAA,GAAG,EAAE;AAFyF,WAAlF;AAGXC,UAAAA,MAAM,EAAE;AAHG,SAAd;AAID,OALe,CAAhB;AAMD;;;AA4BD;6BAES;AAAA,wBACsB,KAAKL,KAD3B;AAAA,UACCE,QADD,eACCA,QADD;AAAA,UACWG,MADX,eACWA,MADX;AAAA,UAECE,OAFD,GAEa,KAAKhB,KAFlB,CAECgB,OAFD;;AAIP,UAAIF,MAAJ,EAAY;AACV,eACE;AACE,UAAA,KAAK,EAAEnB,QADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAGE,oBAAE,GAAF;AACE,UAAA,MAAM,EAAE,KAAKK,KAAL,CAAWsB,MADrB;AAEE,UAAA,OAAO,EAAE,KAAKZ,UAFhB;AAGE,UAAA,IAAI,EAAE,EAHR;AAIE,UAAA,KAAK,EAAEf,QAJT;AAKE,UAAA,aAAa,EAAE;AACbiB,YAAAA,GAAG,EAAED,QAAQ,CAACC,GADD;AAEbC,YAAAA,GAAG,EAAEF,QAAQ,CAACE;AAFD,WALjB;AASE,UAAA,MAAM,EAAEC,MATV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAWE,oBAAC,MAAD;AACE,UAAA,OAAO,EAAE,KAAKb,aADhB;AAEE,UAAA,SAAS,EAAE;AACTW,YAAAA,GAAG,EAAED,QAAQ,CAACC,GADL;AAETC,YAAAA,GAAG,EAAEF,QAAQ,CAACE;AAFL,WAFb;AAME,UAAA,IAAI,EAAEG,OANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAXF,EAmBE,oBAAC,UAAD;AACE,UAAA,MAAM,EAAE,KAAKP,KAAL,CAAWH,YADrB;AAEE,UAAA,OAAO,EAAE,KAAKG,KAAL,CAAWF,iBAFtB;AAGE,UAAA,OAAO,EAAE,KAAKC,OAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAK,KAAKC,KAAL,CAAWJ,aAAX,CAAyBkB,IAA9B,CADF,CALF,CAnBF,CAHF,CADF;AAmCD,OApCD,MAoCK;AACH,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;AACF;;;;EArGgBnC,S;;AAwGnB,eAAeI,gBAAgB,CAAC;AAC9BgC,EAAAA,MAAM,EAAE9B;AADsB,CAAD,CAAhB,CAEZK,IAFY,CAAf","sourcesContent":["import React, { Component } from 'react';\n\n//adding google maps\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport { getGeocodingInfo } from '../../api/google.geocoding';\n\nexport const API_KEY = 'AIzaSyCiI9shqkKiKx8rs57v02JoWtKfP2aSyHk';\n\nconst MAP_SIZE = {\n  width: '400px',\n  height: '400px',\n  padding: '20px'\n}\n\nclass Maps extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showingInfoWindow: false,  //Hides or the shows the infoWindow\n      activeMarker: {},          //Shows the active marker upon click\n      selectedPlace: {},          //Shows the infoWindow to the selected place upon a marker\n      location: {\n        lat: 0,\n        lng: 0\n      },\n      loaded: false\n    }\n    //binding to event handler functions\n    this.onMarkerClick = this.onMarkerClick.bind(this);\n    this.onMapClick = this.onMapClick.bind(this);\n\n  }\n\n  componentWillMount(){\n    const { address } = this.props;\n    getGeocodingInfo(API_KEY, address, (res) => {\n      this.setState({ location: res.data.results.length > 0 ? res.data.results[0].geometry.location : {\n        lat: 0,\n        lng: 0\n      }, loaded: true })\n    })\n  }\n\n  onMarkerClick = (props, marker, e) => {\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  }\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  onMapClick = (props) => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  }\n\n  //for maps\n\n  render() {\n    const { location, loaded } = this.state;\n    const { address } = this.props;\n\n    if (loaded) {\n      return (\n        <div\n          style={MAP_SIZE}\n        >\n          < Map\n            google={this.props.google}\n            onClick={this.onMapClick}\n            zoom={14}\n            style={MAP_SIZE}\n            initialCenter={{\n              lat: location.lat,\n              lng: location.lng\n            }}\n            loaded={loaded}\n          >\n            <Marker\n              onClick={this.onMarkerClick}\n              mapCenter={{\n                lat: location.lat,\n                lng: location.lng\n              }}\n              name={address}\n            />\n            <InfoWindow\n              marker={this.state.activeMarker}\n              visible={this.state.showingInfoWindow}\n              onClose={this.onClose}\n            >\n              <div>\n                <h4>{this.state.selectedPlace.name}</h4>\n              </div>\n            </InfoWindow>\n          </Map>\n        </div>\n      )\n    }else{\n      return <div />\n    }\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: API_KEY\n})(Maps);\n\n"]},"metadata":{},"sourceType":"module"}