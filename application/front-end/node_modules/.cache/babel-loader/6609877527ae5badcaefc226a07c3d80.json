{"ast":null,"code":"import _classCallCheck from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/login/login-form.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, FormControlLabel, Button, Checkbox, Grid } from '@material-ui/core';\nimport Formsy from 'formsy-react';\nimport ValidateTextField from '../registration/field-with-validation';\nimport { Redirect } from 'react-router-dom';\nimport { userLogin } from '../../api/user.actions';\nimport qs from 'qs';\nimport SnackBar from '../_global/component/snack-bar';\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      marginLeft: theme.spacing.unit * 10,\n      marginRight: theme.spacing.unit * 10\n    },\n    form: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    field: {\n      marginTop: theme.spacing.unit,\n      width: theme.spacing.unit * 50\n    }\n  };\n};\n\nvar snackBarConfig = {\n  REGISTRATION_SUCCESS: {\n    message: 'Account successfully created. Please login.',\n    type: 'success'\n  },\n  LOGIN_FAILED: {\n    message: 'Username or password is invalid',\n    type: 'error'\n  },\n  AUTHENTICATION_REQUIRED: {\n    message: 'Authentication required.',\n    type: 'error'\n  }\n};\n\nvar LoginForm =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LoginForm, _Component);\n\n  function LoginForm(props) {\n    var _this;\n\n    _classCallCheck(this, LoginForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoginForm).call(this, props));\n\n    _this._handleCheck = function () {\n      var remember = _this.state.remember;\n\n      _this.setState({\n        remember: !remember\n      });\n    };\n\n    _this.submitLogin = function (regForm) {\n      userLogin(regForm, function (data) {\n        sessionStorage.setItem('session', JSON.stringify(data));\n\n        _this.setState({\n          loginSuccess: true\n        });\n      }, function () {\n        return _this.setState({\n          message: {\n            open: true,\n            type: 'LOGIN_FAILED'\n          }\n        });\n      });\n    };\n\n    _this.disableSubmit = function () {\n      _this.setState({\n        canSubmit: false\n      });\n    };\n\n    _this.enableSubmit = function () {\n      _this.setState({\n        canSubmit: true\n      });\n    };\n\n    _this.state = {\n      canSubmit: false,\n      remember: false,\n      loginSuccess: false,\n      message: {\n        open: false,\n        type: null // Success or Failure\n\n      },\n      loginCredentials: {\n        email: '',\n        password: ''\n      }\n    };\n    _this._handleCheck = _this._handleCheck.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(LoginForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var params = qs.parse(this.props.location.search, {\n        ignoreQueryPrefix: true\n      });\n\n      if (params.registration) {\n        // Trigger to display a snack bar\n        this.setState({\n          message: {\n            open: true,\n            type: 'REGISTRATION_SUCCESS'\n          }\n        });\n      } else if (params.authentication) {\n        this.setState({\n          message: {\n            open: true,\n            type: 'AUTHENTICATION_REQUIRED'\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      var _this$state = this.state,\n          canSubmit = _this$state.canSubmit,\n          remember = _this$state.remember,\n          loginSuccess = _this$state.loginSuccess,\n          message = _this$state.message;\n\n      if (loginSuccess) {\n        return React.createElement(Redirect, {\n          to: '/?refresh=true',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        justify: 'center',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Formsy, {\n        className: classes.form,\n        onValid: this.enableSubmit,\n        onInvalid: this.disableSubmit,\n        onValidSubmit: this.submitLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(ValidateTextField, {\n        name: \"email\",\n        autoComplete: \"email\",\n        validations: \"minLength:3\",\n        validationErrors: {\n          minLength: \"Invalid Email\"\n        },\n        required: true,\n        className: classes.field,\n        label: \"Email\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(ValidateTextField, {\n        name: \"password\",\n        type: 'password',\n        autoComplete: \"password\",\n        required: true,\n        className: classes.field,\n        label: \"Password\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }), React.createElement(FormControlLabel, {\n        control: React.createElement(Checkbox, {\n          checked: remember,\n          onChange: this._handleCheck,\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 129\n          },\n          __self: this\n        }),\n        label: \"Remember Me\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(Button, {\n        disableFocusRipple: true,\n        disableRipple: true,\n        style: {\n          textTransform: \"none\"\n        },\n        variant: \"text\",\n        color: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Forgot password ?\"), React.createElement(\"div\", {\n        className: classes.actions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        color: \"primary\",\n        disabled: !canSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Log In\")))), message.open && React.createElement(SnackBar, {\n        open: message.open,\n        type: snackBarConfig[message.type].type,\n        message: snackBarConfig[message.type].message,\n        onClose: function onClose() {\n          return _this2.setState({\n            message: {\n              open: false,\n              type: null\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return LoginForm;\n}(Component);\n\nexport default withStyles(styles)(LoginForm);","map":{"version":3,"sources":["/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/login/login-form.js"],"names":["React","Component","PropTypes","withStyles","FormControlLabel","Button","Checkbox","Grid","Formsy","ValidateTextField","Redirect","userLogin","qs","SnackBar","styles","theme","root","marginLeft","spacing","unit","marginRight","form","display","flexDirection","field","marginTop","width","snackBarConfig","REGISTRATION_SUCCESS","message","type","LOGIN_FAILED","AUTHENTICATION_REQUIRED","LoginForm","props","_handleCheck","remember","state","setState","submitLogin","regForm","data","sessionStorage","setItem","JSON","stringify","loginSuccess","open","disableSubmit","canSubmit","enableSubmit","loginCredentials","email","password","bind","params","parse","location","search","ignoreQueryPrefix","registration","authentication","classes","minLength","textTransform","actions"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { \n  withStyles, FormControlLabel,\n  Button, Checkbox, Grid\n} from '@material-ui/core';\nimport Formsy from 'formsy-react';\nimport ValidateTextField from '../registration/field-with-validation';\nimport { Redirect } from 'react-router-dom';\nimport {userLogin} from '../../api/user.actions';\nimport qs from 'qs';\nimport SnackBar from '../_global/component/snack-bar';\n\nconst styles = theme => ({\n  root: {\n    marginLeft: theme.spacing.unit*10,\n    marginRight: theme.spacing.unit*10,\n  },\n  form: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  field: {\n    marginTop: theme.spacing.unit,\n    width: theme.spacing.unit*50\n  },\n});\n\nconst snackBarConfig = {\n  REGISTRATION_SUCCESS: {\n    message: 'Account successfully created. Please login.',\n    type: 'success'\n  },\n  LOGIN_FAILED: {\n    message: 'Username or password is invalid',\n    type: 'error'\n  },\n  AUTHENTICATION_REQUIRED: {\n    message: 'Authentication required.',\n    type: 'error'\n  },\n}\n\nclass LoginForm extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      canSubmit: false,\n      remember: false,\n      loginSuccess: false,\n      message: {\n        open: false,\n        type: null // Success or Failure\n      },\n      loginCredentials:{\n        email:'',\n        password:'',\n      },\n    }\n    this._handleCheck = this._handleCheck.bind(this);\n  }\n\n  componentDidMount(){\n    const params = qs.parse(this.props.location.search, { ignoreQueryPrefix: true });\n    if(params.registration){\n      // Trigger to display a snack bar\n      this.setState({ message: { open: true, type: 'REGISTRATION_SUCCESS' } })\n    }else if (params.authentication){\n      this.setState({ message: { open: true, type: 'AUTHENTICATION_REQUIRED' } })\n    }\n  }\n\n  _handleCheck = () => {\n    const { remember } = this.state;\n    this.setState({ remember: !remember })\n  }\n\n\n  submitLogin = (regForm) =>{\n    userLogin(regForm, (data) => {\n       sessionStorage.setItem('session', JSON.stringify(data))\n       this.setState({ loginSuccess: true })\n    }, () => this.setState({ message: { open: true, type: 'LOGIN_FAILED' } })); \n  }\n\n  render() {\n\n    const { classes } = this.props;\n    const { canSubmit, remember, loginSuccess, message } = this.state;\n\n    if(loginSuccess){\n      return <Redirect to={'/?refresh=true'} />\n    }\n\n    return (\n      <div className={classes.root}>\n        <Grid\n          container\n          justify={'center'}\n        >\n          <Formsy\n            className={classes.form}\n            onValid={this.enableSubmit}\n            onInvalid={this.disableSubmit}\n            onValidSubmit={this.submitLogin}\n          >\n            <ValidateTextField\n              name=\"email\"\n              autoComplete=\"email\"\n              validations=\"minLength:3\"\n              validationErrors={{\n                minLength: \"Invalid Email\"\n              }}\n              required\n              className={classes.field}\n              label=\"Email\"\n            />\n            <ValidateTextField\n              name=\"password\"\n              type={'password'}\n              autoComplete=\"password\"\n              required\n              className={classes.field}\n              label=\"Password\"\n            />\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={remember}\n                  onChange={this._handleCheck}\n                  color=\"primary\"\n                />\n              }\n              label=\"Remember Me\"\n            />\n            <Button \n              disableFocusRipple\n              disableRipple\n              style={{ textTransform: \"none\" }}\n              variant=\"text\"\n              color=\"primary\"\n            >\n              Forgot password ?\n            </Button>\n            <div className={classes.actions}>\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\" color=\"primary\"\n                disabled={!canSubmit}>Log In</Button>\n            </div>\n          </Formsy>\n        </Grid>\n        { message.open && <SnackBar\n          open={message.open}\n          type={snackBarConfig[message.type].type}\n          message={snackBarConfig[message.type].message}\n          onClose={() => this.setState({ message: { open: false, type: null } })}\n        /> }\n      </div>\n    );\n  }\n\n  disableSubmit = () => {\n    this.setState({ canSubmit: false })\n  };\n\n  enableSubmit = () => {\n    this.setState({ canSubmit: true })\n  };\n\n}\n\nexport default withStyles(styles)(LoginForm);"]},"metadata":{},"sourceType":"module"}