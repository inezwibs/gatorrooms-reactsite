{"ast":null,"code":"import _classCallCheck from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/inez/Documents/csc648-sp19-team09/application/front-end/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/contact/contact-page.js\";\nimport React, { Component } from 'react';\nimport { Grid, Paper, withStyles, Button, TextField, Typography, Icon, IconButton, List, ListItem, Divider, ListItemText, ListItemSecondaryAction, ListItemAvatar, Avatar, FormGroup, FormControl } from '@material-ui/core';\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\nimport styles from './styles/contact-page';\nimport { getInbox, getChat, sendMessage, deleteChat } from '../../api/message.actions';\nimport MessageBox from './component/message-box';\n\nvar ContactPage =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactPage, _Component);\n\n  function ContactPage(props) {\n    var _this;\n\n    _classCallCheck(this, ContactPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContactPage).call(this, props));\n\n    _this.getChats = function () {\n      getInbox(function (chatObj) {\n        _this.setState({\n          allUsersChats: chatObj.inbox || [],\n          userEmail: chatObj.userEmail\n        });\n      });\n    };\n\n    _this.onChangeMessage = function (_ref) {\n      var value = _ref.target.value;\n\n      _this.setState({\n        nextMessage: value\n      });\n    };\n\n    _this.deleteConversation = function (chatId) {\n      deleteChat(chatId, function () {\n        _this.getChats();\n      });\n    };\n\n    _this.handleSendButton = function () {\n      //if nothing to send dont send\n      if (_this.state.nextMessage === '') {\n        return;\n      }\n\n      var messagePacket = {\n        'chatId': _this.state.allUsersChats[_this.state.currentChatIndex].chatId,\n        'message': _this.state.nextMessage\n      };\n      sendMessage(messagePacket, function (resp) {\n        _this.selectChat(_this.state.currentChatIndex);\n\n        _this.setState({\n          nextMessage: ''\n        });\n      });\n    };\n\n    _this.selectChat = function (chatIndex) {\n      if (_this.state.allUsersChats[chatIndex] == null) {\n        return;\n      }\n\n      getChat(_this.state.allUsersChats[chatIndex].chatId, function (messagesObject) {\n        var chat = _this.state.allUsersChats[chatIndex];\n\n        _this.setState({\n          currentChatIndex: chatIndex,\n          noChatSelected: false,\n          currentChat: {\n            chatInfo: {\n              chatingWith: chat.chatingWith,\n              listingTitle: chat.listingTitle,\n              listingId: chat.listingId,\n              contactsAvatar: chat.contactsAvatar\n            },\n            messages: messagesObject.messages\n          }\n        });\n      });\n    };\n\n    _this.getChatMessages = function (chatIndex) {\n      if (_this.state.allUsersChats.length === 0) {\n        return [];\n      }\n\n      return _this.state.allUsersChats[chatIndex].messages;\n    };\n\n    _this.chatsList = function () {\n      if (_this.state.allUsersChats.length === 0) return;\n      var chatListItems = [];\n\n      _this.state.allUsersChats.forEach(function (chat, index) {\n        chatListItems.push(React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, React.createElement(ListItem, {\n          button: true,\n          onClick: function onClick() {\n            return _this.selectChat(index);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(ListItemAvatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, React.createElement(Avatar, {\n          alt: \"dm user avatar\".concat(index),\n          src: chat.contactsAvatar,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 143\n          },\n          __self: this\n        })), React.createElement(ListItemText, {\n          primary: chat.chatingWith,\n          secondary: \"Listing - \".concat(chat.listingTitle, \" \"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }), React.createElement(ListItemSecondaryAction, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, React.createElement(IconButton, {\n          \"aria-label\": \"Delete\",\n          onClick: function onClick() {\n            return _this.deleteConversation(chat.chatId);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(DeleteForeverRoundedIcon, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 163\n          },\n          __self: this\n        })))), React.createElement(Divider, {\n          light: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        })));\n      });\n\n      return chatListItems;\n    };\n\n    _this.state = {\n      //all chat ids\n      allUsersChats: [],\n      currentChatIndex: 0,\n      nextMessage: '',\n      userEmail: '',\n      currentChat: {\n        chatInfo: {\n          chatingWith: '',\n          listingTitle: '',\n          listingId: null,\n          contactsAvatar: ''\n        },\n        messages: []\n      },\n      noChatSelected: true\n    };\n    _this.getChats = _this.getChats.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.selectChat = _this.selectChat.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSendButton = _this.handleSendButton.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getChatMessages = _this.getChatMessages.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.deleteConversation = _this.deleteConversation.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(ContactPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getChats();\n    } //get data from API enpoint \n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var classes = this.props.classes;\n      var _this$state = this.state,\n          currentChat = _this$state.currentChat,\n          noChatSelected = _this$state.noChatSelected;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        lg: 4,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"h5\",\n        gutterBottom: true,\n        align: \"center\",\n        style: {\n          padding: 20\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191\n        },\n        __self: this\n      }, \"Direct Messages\"), React.createElement(List, {\n        className: classes.root,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, this.chatsList())), React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        lg: 8,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(Paper, {\n        className: classes.messagePaper,\n        elevation: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(MessageBox, {\n        defaultBox: noChatSelected,\n        refreshHandler: function refreshHandler() {\n          _this2.selectChat(_this2.state.currentChatIndex);\n        },\n        messages: currentChat.messages,\n        chatInfo: currentChat.chatInfo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      })), React.createElement(Paper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(FormControl, {\n        fullWidth: true,\n        className: classes.margin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"standard-full-width\",\n        onChange: this.onChangeMessage,\n        label: \"Type message\",\n        variant: \"outlined\",\n        multiline: \"true\",\n        fullWidth: true,\n        value: this.state.nextMessage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      })), React.createElement(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        className: classes.button,\n        onClick: this.handleSendButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, \"Send\", React.createElement(Icon, {\n        className: classes.rightIcon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, \"send\")))))));\n    }\n  }]);\n\n  return ContactPage;\n}(Component);\n\nexport default withStyles(styles, {\n  withTheme: true\n})(ContactPage);","map":{"version":3,"sources":["/home/inez/Documents/csc648-sp19-team09/application/front-end/src/modules/contact/contact-page.js"],"names":["React","Component","Grid","Paper","withStyles","Button","TextField","Typography","Icon","IconButton","List","ListItem","Divider","ListItemText","ListItemSecondaryAction","ListItemAvatar","Avatar","FormGroup","FormControl","DeleteForeverRoundedIcon","styles","getInbox","getChat","sendMessage","deleteChat","MessageBox","ContactPage","props","getChats","chatObj","setState","allUsersChats","inbox","userEmail","onChangeMessage","value","target","nextMessage","deleteConversation","chatId","handleSendButton","state","messagePacket","currentChatIndex","resp","selectChat","chatIndex","messagesObject","chat","noChatSelected","currentChat","chatInfo","chatingWith","listingTitle","listingId","contactsAvatar","messages","getChatMessages","length","chatsList","chatListItems","forEach","index","push","bind","classes","padding","root","messagePaper","margin","button","rightIcon","withTheme"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport { \n  Grid,Paper,withStyles,\n  Button,TextField, Typography, \n  Icon,IconButton,\n  List,ListItem,Divider,\n  ListItemText, ListItemSecondaryAction,ListItemAvatar,\n  Avatar, \n  FormGroup,FormControl\n } from '@material-ui/core';\n\nimport DeleteForeverRoundedIcon from '@material-ui/icons/DeleteForeverRounded';\nimport styles from './styles/contact-page';\n\nimport { getInbox, getChat, sendMessage, deleteChat } from '../../api/message.actions';\n\n\nimport MessageBox from './component/message-box';\n\nclass ContactPage extends Component{\n\n  constructor(props){\n    super(props);\n    this.state = {\n      //all chat ids\n      allUsersChats: [],\n      currentChatIndex:0,\n      nextMessage:'',\n      userEmail:'',\n\n      currentChat:{\n        chatInfo:{\n          chatingWith: '',\n          listingTitle: '',\n          listingId: null,\n          contactsAvatar: '',\n        },\n        messages:[],\n       },\n\n       noChatSelected: true,\n    };\n\n    this.getChats = this.getChats.bind(this);\n    this.selectChat = this.selectChat.bind(this);\n    this.handleSendButton = this.handleSendButton.bind(this);       \n    this.getChatMessages = this.getChatMessages.bind(this);\n    this.deleteConversation = this.deleteConversation.bind(this);\n\n  }\n\n\n  componentDidMount(){  \n    this.getChats();   \n  } \n\n //get data from API enpoint \n getChats = () => {  \n      getInbox( (chatObj)=>{              \n        this.setState({ \n          allUsersChats: chatObj.inbox || [],\n          userEmail: chatObj.userEmail,\n         });\n      });   \n  }\n\n  onChangeMessage = ({target: {value}}) =>{\n    this.setState({\n      nextMessage: value\n    });\n  }\n\n  deleteConversation = (chatId) =>{\n    deleteChat( chatId, () => {\n      this.getChats(); \n    });\n  }\n\n  handleSendButton = () =>{\n    //if nothing to send dont send\n    if(this.state.nextMessage === ''){\n      return\n    }\n\n    let messagePacket ={\n     'chatId': this.state.allUsersChats[this.state.currentChatIndex].chatId,\n     'message': this.state.nextMessage,\n    }    \n    sendMessage(messagePacket, (resp)=>{                \n       this.selectChat(this.state.currentChatIndex);\n       this.setState({\n        nextMessage: ''\n       });    \n    });\n  }\n\n  //select a chat to show\n  selectChat = (chatIndex) =>{\n    if(this.state.allUsersChats[chatIndex] == null){return;}\n\n    getChat(this.state.allUsersChats[chatIndex].chatId, (messagesObject)=>{\n      let chat = this.state.allUsersChats[chatIndex];\n      this.setState({\n        currentChatIndex: chatIndex,\n        noChatSelected:false,\n        currentChat: {\n          chatInfo:{\n           chatingWith: chat.chatingWith,\n           listingTitle: chat.listingTitle,          \n           listingId: chat.listingId,\n           contactsAvatar: chat.contactsAvatar,\n          },\n          messages: messagesObject.messages,\n        }\n\n      });\n    })   \n  } \n\n  getChatMessages = (chatIndex) =>{\n     if(this.state.allUsersChats.length === 0){\n       return [];\n     }\n     return this.state.allUsersChats[chatIndex].messages;\n  }\n\n\n  chatsList = () => {\n    if(this.state.allUsersChats.length === 0) \n      return;\n    let chatListItems = [];\n    this.state.allUsersChats.forEach((chat, index)=>{\n    \n        chatListItems.push(\n           <div>\n\n             <ListItem \n               button           \n                onClick={() => this.selectChat(index) }\n              >\n              <ListItemAvatar>\n                 <Avatar\n                   alt={`dm user avatar${index}`}\n                   src={chat.contactsAvatar} \n                 />\n              </ListItemAvatar>\n                \n               <ListItemText\n                  primary={\n                   chat.chatingWith\n                  }\n                  secondary={\n                    `Listing - ${chat.listingTitle} `\n                  }                 \n               />\n    \n                  <ListItemSecondaryAction>\n                        <IconButton \n                          aria-label=\"Delete\"\n                          onClick={() => this.deleteConversation(chat.chatId) }\n                         >\n                          <DeleteForeverRoundedIcon />\n                        </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n\n              <Divider light />\n           </div>\n        );\n    });\n  \n   return chatListItems;\n  }\n\n\n\n  render() {\n    const {classes} = this.props;\n    const {currentChat, noChatSelected} = this.state;\n\n\n    return(\n     <div>      \n\n\n\n      <Grid container>       \n\n          <Grid item xs={12} md={4} lg={4}>\n              <Typography \n                 variant=\"h5\" \n                 gutterBottom \n                 align=\"center\"\n                 style={{padding:20}}\n              >\n                Direct Messages\n              </Typography>\n\n              <List className={classes.root}>\n                 {this.chatsList()}\n              </List>\n          </Grid>\n        \n\n           <Grid item xs={12} md={8} lg={8}>\n\n               <Paper \n                 className={classes.messagePaper}\n                 elevation='1'\n                >\n                           \n                <MessageBox                \n                  defaultBox={noChatSelected}\n                  refreshHandler={()=>{ this.selectChat(this.state.currentChatIndex) }}\n                  messages={currentChat.messages}\n                  chatInfo={currentChat.chatInfo}\n                 />\n\n                </Paper>\n\n                <Paper>\n                  <FormGroup>\n                    <FormControl fullWidth className={classes.margin}>                 \n                         <TextField\n                             id=\"standard-full-width\"\n                             onChange={this.onChangeMessage}\n                             label=\"Type message\"        \n                             variant=\"outlined\"\n                             multiline=\"true\"\n                             fullWidth \n                            value={this.state.nextMessage}\n                           />                               \n                    </FormControl>\n\n                    <Button \n                     variant=\"contained\" \n                     color=\"primary\" \n                     className={classes.button}\n                     onClick= {this.handleSendButton}\n                     >\n                        Send \n                    <Icon className={classes.rightIcon}>send</Icon>\n                    </Button>\n\n                  </FormGroup>\n                </Paper>                   \n\n            </Grid>\n          </Grid>        \n        </div>       \n     );\n  }\n\n}\n\nexport default withStyles(styles, {withTheme:true}) (ContactPage); "]},"metadata":{},"sourceType":"module"}